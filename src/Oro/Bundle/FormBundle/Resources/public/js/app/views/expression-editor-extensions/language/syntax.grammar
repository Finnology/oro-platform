@precedence {
  and @left,
  or @left
  matches @left
  compare @left
  member
  comma @left
}

@top SymfonyExpression { groups* }

@skip { spaces | newline }

kw<term, name> { @specialize[@name={name}]<identifier, term> }

groups {
  GroupNode |
  GroupOperator |
  BracketGroup |
  BracesGroup
}

GroupNode {
  expression | operators
}

GroupOperator[@name=GroupNode] {
  kw<'or', 'GroupOperator'> | kw<'and', 'GroupOperator'>
}

expression {
  EmptyBrackets |
  Entity |
  Function |
  String |
  Number |
  Array |
  kw<'true', 'Boolean'> |
  kw<'false', 'Boolean'>
}

operators {
  Operator |
  LiteralOperator
}

EmptyBrackets {
  '()'
}

BracketGroup {
  BracketOpen groups* BracketClose
}

BracesGroup {
  BraceOpen groups* BraceClose
}

EntityName { identifier Array? }

PropertyName { word }

Entity {
  EntityName (Dot PropertyName)+
}

ArgList {
  commaSep<"..."? expression>
}

FunctionName {
  identifier
}

Function {
  FunctionName BracketOpen ArgList BracketClose |
  FunctionName EmptyBrackets
}

commaSep<content> {
  "" | content (Comma content?)*
}

LiteralOperator {
  kw<'in', 'LiteralOperator'> | kw<'not', 'LiteralOperator'> | kw<'matches', 'LiteralOperator'>
}

ArrayItem {
  expression
}

Array { SquareBracketOpen commaSep<ArrayItem*> SquareBracketClose }

@tokens {
    spaces[@export] { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }

    newline[@export] { $[\r\n\u2028\u2029] }

    identifierChar { @asciiLetter | '_' | '\\' | ':' }

    word { identifierChar (identifierChar | @digit)* }

    identifier { word }

    Number { (@digit)+ }

    Operator { '>=' | '<=' | '!=' | '=' | '==' | '===' | '>' | '<' | '+' | '*' | '%' | '-' | '/' }

    String {
      '"' (![\\\n"] | "\\" _)* '"'? |
      "'" (![\\\n'] | "\\" _)* "'"?
    }

    Dot { '.' }

    Comma { ',' }

    BracketOpen { '(' }

    BracketClose { ')' }

    BraceOpen { '{' }

    BraceClose { '}' }

    SquareBracketOpen { '[' }

    SquareBracketClose { ']' }
}

@detectDelim
